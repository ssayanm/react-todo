{"version":3,"sources":["context/AppReducer.js","context/GlobalState.js","components/layout/Header.js","components/pages/About.js","components/TodoItem.js","components/TodosList.js","components/AddTodo.js","components/pages/Home.js","App.js","serviceWorker.js","index.js"],"names":["state","action","type","loading","todos","payload","filter","todo","_id","map","completed","error","initialState","GlobalContext","createContext","GlobalProvider","children","useReducer","AppReducer","dispatch","getTodos","a","axios","get","res","data","response","deleteTodo","id","delete","markComplete","patch","addTodo","config","header","post","Provider","value","false","headerStyle","background","color","textAlign","paddding","Header","style","to","About","Fragment","TodoItem","useContext","padding","margin","borderBottom","textDecoration","onChange","defaultChecked","onClick","border","cursor","float","borderRadius","title","TodoList","useEffect","key","AddTodo","useState","setTitle","onSubmit","e","preventDefault","newTodo","uuidv4","display","name","placeholder","flex","target","className","Home","App","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.a79a3498.chunk.js","sourcesContent":["export default (state, action) => {\n  switch (action.type) {\n    case \"GET_TODOS\":\n      return {\n        ...state,\n        loading: false,\n        todos: action.payload,\n      };\n\n    case \"DELETE_TODO\":\n      return {\n        ...state,\n        todos: state.todos.filter((todo) => todo._id !== action.payload), //filtering the id that needs to be deleted\n      };\n\n    case \"ADD_TODO\":\n      return {\n        ...state,\n        todos: [...state.todos, action.payload],\n      };\n\n    case \"COMPLETED_TODO\":\n      return {\n        ...state,\n        // looping through each todos items and checking the clicked chekcbox todo id with the existing id of todo, when it is matching I am toggling the \"completed\" for true or false and if not matching I am just returing the todo\n        todos: state.todos.map((todo) =>\n          todo._id === action.payload\n            ? { ...todo, completed: !todo.completed }\n            : todo\n        ),\n      };\n\n    case \"TODO_ERROR\":\n      return {\n        ...state,\n        error: action.payload,\n      };\n\n    default:\n      return state;\n  }\n};\n","import React, { useReducer, createContext } from \"react\";\nimport AppReducer from \"./AppReducer\";\nimport axios from \"axios\";\n\n//initial State\nconst initialState = {\n  todos: [],\n  error: null,\n  loading: true,\n  completed: false,\n};\n\n//Create Context\nexport const GlobalContext = createContext(initialState);\n\n// Provider component\nexport const GlobalProvider = ({ children }) => {\n  const [state, dispatch] = useReducer(AppReducer, initialState);\n\n  //Actions\n  const getTodos = async () => {\n    try {\n      const res = await axios.get(\"/api/v1/todos\");\n\n      dispatch({\n        type: \"GET_TODOS\",\n        payload: res.data.data,\n      });\n    } catch (err) {\n      dispatch({\n        type: \"TODO_ERROR\",\n        payload: err.response.data.error,\n      });\n    }\n  };\n\n  const deleteTodo = async (id) => {\n    try {\n      await axios.delete(`/api/v1/todos/${id}`);\n      dispatch({\n        type: \"DELETE_TODO\",\n        payload: id,\n      });\n    } catch (err) {\n      dispatch({\n        type: \"TODO_ERROR\",\n        payload: err.response.data.error,\n      });\n    }\n  };\n\n  // Toggle Complete\n  const markComplete = async (id) => {\n    try {\n      await axios.patch(`/api/v1/todos/${id}`);\n      dispatch({\n        type: \"COMPLETED_TODO\",\n        payload: id,\n      });\n    } catch (err) {\n      dispatch({\n        type: \"TODO_ERROR\",\n        payload: err.response.data.error,\n      });\n    }\n  };\n\n  const addTodo = async (todo) => {\n    const config = {\n      header: {\n        \"Content-Type\": \"application/json\",\n      },\n    };\n    try {\n      const res = await axios.post(\"/api/v1/todos\", todo, config);\n\n      dispatch({\n        type: \"ADD_TODO\",\n        payload: res.data.data,\n      });\n    } catch (err) {\n      dispatch({\n        type: \"TODO_ERROR\",\n        payload: err.response.data.error,\n      });\n    }\n  };\n\n  return (\n    <GlobalContext.Provider\n      value={{\n        todos: state.todos,\n        error: state.error,\n        loading: state.loading,\n        completed: state.false,\n        getTodos,\n        addTodo,\n        deleteTodo,\n        markComplete,\n      }}\n    >\n      {children}\n    </GlobalContext.Provider>\n  );\n};\n","import React from \"react\";\nimport { Link } from \"react-router-dom\";\n\nconst Header = () => {\n  return (\n    <div>\n      <header style={headerStyle}>\n        <h1>My TodoList</h1>\n        <Link to=\"/\">Home</Link> | <Link to=\"/about\">About</Link>\n      </header>\n    </div>\n  );\n};\n\nconst headerStyle = {\n  background: \"#FDBD2C\",\n  color: \"#000\",\n  textAlign: \"center\",\n  paddding: \"10px\",\n};\nexport default Header;\n","import React from \"react\";\n\nconst About = () => {\n  return (\n    <React.Fragment>\n      <h2>About Page</h2>\n      <p>\n        Lorem Ipsum is simply dummy text of the printing and typesetting\n        industry. Lorem Ipsum has been the industry's standard dummy text ever\n        since the 1500s, when an unknown printer took a galley of type and\n        scrambled it to make a type specimen book. It has survived not only five\n        centuries, but also the leap into electronic typesetting, remaining\n        essentially unchanged. It was popularised in the 1960s with the release\n        of Letraset sheets containing Lorem Ipsum passages, and more recently\n        with desktop publishing software like Aldus PageMaker including versions\n        of Lorem Ipsum.\n      </p>\n    </React.Fragment>\n  );\n};\n\nexport default About;\n","import React, { useContext } from \"react\";\nimport { GlobalContext } from \"../context/GlobalState\";\n\nconst TodoItem = ({ todo }) => {\n  const { deleteTodo, markComplete } = useContext(GlobalContext);\n\n  const getStyle = () => {\n    return {\n      background: \"lightgrey\",\n      padding: \"10px\",\n      margin: \"10px 0\",\n      borderBottom: \"1px #ccc dotted\",\n      textDecoration: todo.completed ? \"line-through\" : \"none\",\n    };\n  };\n\n  const btnStyle = {\n    background: \"red\",\n    color: \"#fff\",\n    border: \"none\",\n    padding: \"5px 10px\",\n    cursor: \"pointer\",\n    float: \"right\",\n    borderRadius: \"50%\",\n  };\n\n  return (\n    <div>\n      <div style={getStyle()}>\n        <p>\n          <input\n            style={{ margin: \"10px\" }}\n            type=\"checkbox\"\n            onChange={() => markComplete(todo._id)}\n            defaultChecked={todo.completed}\n          />\n          <button onClick={() => deleteTodo(todo._id)} style={btnStyle}>\n            x\n          </button>\n          {todo.title}\n        </p>\n      </div>\n    </div>\n  );\n};\n\nexport default TodoItem;\n","import React, { useContext, useEffect } from \"react\";\nimport { GlobalContext } from \"../context/GlobalState\";\nimport TodoItem from \"./TodoItem\";\n\nconst TodoList = () => {\n  const { todos, getTodos } = useContext(GlobalContext);\n\n  useEffect(() => {\n    getTodos();\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  return (\n    <div>\n      <div>\n        {todos.map((todo) => (\n          <TodoItem key={todo._id} todo={todo} />\n        ))}\n      </div>\n    </div>\n  );\n};\n\nexport default TodoList;\n","import React, { useState, useContext } from \"react\";\nimport { GlobalContext } from \"../context/GlobalState.js\";\nimport { v4 as uuidv4 } from \"uuid\";\n\nconst AddTodo = () => {\n  const { addTodo } = useContext(GlobalContext);\n\n  const [title, setTitle] = useState(\"\");\n\n  const onSubmit = (e) => {\n    e.preventDefault();\n\n    const newTodo = {\n      id: uuidv4(),\n      title,\n    };\n    setTitle(\"\");\n    addTodo(newTodo);\n  };\n\n  return (\n    <form onSubmit={onSubmit} style={{ display: \"flex\" }}>\n      <input\n        type=\"text\"\n        name=\"title\"\n        placeholder=\"Add Todo\"\n        style={{ flex: \"10\", padding: \"5px\" }}\n        value={title}\n        onChange={(e) => setTitle(e.target.value)}\n      />\n      <input\n        type=\"submit\"\n        value=\"Submit\"\n        className=\"btn\"\n        style={{ flex: \"1\", background: \"#39396B\" }}\n      />\n    </form>\n  );\n};\n\nexport default AddTodo;\n","import React from \"react\";\nimport TodoList from \"../TodosList\";\n\nimport AddTodo from \"../AddTodo\";\n\nconst Home = () => {\n  return (\n    <React.Fragment>\n      <AddTodo />\n      <TodoList />\n    </React.Fragment>\n  );\n};\n\nexport default Home;\n","import React from \"react\";\nimport { BrowserRouter as Router, Route, Switch } from \"react-router-dom\";\nimport { GlobalProvider } from \"./context/GlobalState\";\nimport Header from \"./components/layout/Header\";\n\nimport About from \"./components/pages/About\";\nimport Home from \"./components/pages/Home\";\n\nimport \"./App.css\";\n\nconst App = () => {\n  return (\n    <div className=\"container\">\n      <GlobalProvider>\n        <Router>\n          <Header />\n          <Switch>\n            <Route exact path=\"/\" component={Home} />\n            <Route exact path=\"/about\" component={About} />\n          </Switch>\n        </Router>\n      </GlobalProvider>\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}